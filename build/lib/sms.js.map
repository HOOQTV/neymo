{"version":3,"sources":["sms.js"],"names":[],"mappings":";;;;;;;;AACA;;;;;;;;;;;;;;;;AAGA,IAAM,QAAQ;AACV,UAAM,MADI;AAEV,WAAO,QAFG;AAGV,aAAS,SAHC;AAIV,aAAS,SAJC;AAKV,UAAM,MALI;AAMV,WAAO;AANG,CAAd;;;;IAUqB,G;;;;;;;;;;;AASjB,iBAAY,GAAZ,EAAiB,MAAjB,EAA0G;AAAA,yEAAJ,EAAI;;AAAA,wCAA/E,eAA+E;AAAA,YAA/E,eAA+E,wCAA7D,CAA6D;AAAA,4BAA1D,GAA0D;AAAA,YAA1D,GAA0D,4BAApD,OAAO,EAA6C;AAAA,YAAzC,YAAyC,QAAzC,YAAyC;AAAA,YAA3B,QAA2B,QAA3B,QAA2B;AAAA,YAAjB,QAAiB,QAAjB,QAAiB;;AAAA;;AAAA,2FAChG,GADgG,EAC3F,MAD2F,EACnF,iCADmF;;AAEtG,cAAK,OAAL,GAAe;AACX,4CADW;AAEX,oBAFW;AAGX,sCAHW;AAIX,8BAJW;AAKX;AALW,SAAf;AAFsG;AASzG;;;;;;;;;;;;;;iFASc,I,EAAM,E,EAAI,I;oBAAM,S,yDAAY,K;oBACjC,I,EACF,O;;;;;AADE,oC,GAAO,YAAY,MAAM,OAAlB,GAA4B,MAAM,I,EAC3C,O,GAAU,EAAE,UAAF,EAAQ,MAAR,EAAY,UAAZ,EAAkB,UAAlB,E;;AACd,uCAAO,MAAP,CAAc,OAAd,EAAuB,KAAK,OAA5B;;uCACa,KAAK,IAAL,CAAU,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAUC,I,EAAM,E,EAAI,W;;;;;;uCACX,KAAK,QAAL,CAAc,IAAd,EAAoB,EAApB,EAAwB,WAAxB,EAAqC,IAArC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAUA,I,EAAM,E,EAAI,I;kFAA4B,E;;oBAApB,G,SAAA,G;oBAAK,U,SAAA,U;oBAC9B,I,EACF,O;;;;;AADE,oC,GAAO,MAAM,M,EACf,O,GAAU,EAAE,UAAF,EAAQ,MAAR,EAAY,UAAZ,EAAkB,QAAlB,EAAuB,sBAAvB,EAAmC,UAAnC,E;;AACd,uCAAO,MAAP,CAAc,OAAd,EAAuB,KAAK,OAA5B;;uCACa,KAAK,IAAL,CAAU,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAUF,I,EAAM,E,EAAI,I;oBACf,I,EACF,O;;;;;AADE,oC,GAAO,MAAM,I,EACf,O,GAAU,EAAE,UAAF,EAAQ,MAAR,EAAY,UAAZ,EAAkB,UAAlB,E;;AACd,uCAAO,MAAP,CAAc,OAAd,EAAuB,KAAK,OAA5B;;uCACa,KAAK,IAAL,CAAU,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAUD,I,EAAM,E,EAAI,K;oBAChB,I,EACF,O;;;;;AADE,oC,GAAO,MAAM,K,EACf,O,GAAU,EAAE,UAAF,EAAQ,MAAR,EAAY,YAAZ,EAAmB,UAAnB,E;;AACd,uCAAO,MAAP,CAAc,OAAd,EAAuB,KAAK,OAA5B;;uCACa,KAAK,IAAL,CAAU,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAWC,I,EAAM,E;oBAAI,K,yDAAQ,M;oBAAQ,G,yDAAM,qB;oBACxC,I,EACF,O;;;;;AADE,oC,GAAO,MAAM,O,EACf,O,GAAU,EAAE,UAAF,EAAQ,MAAR,EAAY,YAAZ,EAAmB,QAAnB,EAAwB,UAAxB,E;;AACd,uCAAO,MAAP,CAAc,OAAd,EAAuB,KAAK,OAA5B;;uCACa,KAAK,IAAL,CAAU,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;kBAnGA,G","file":"sms.js","sourcesContent":["/** @module Sms */\nimport Neymo from './neymo';\n\n// sms types\nconst TYPES = {\n    Text: 'text',\n    Bnary: 'binary',\n    WAPPush: 'wappush',\n    Unicode: 'unicode',\n    vCal: 'vcal',\n    vCard: 'vcard'\n};\n\n/** Class representing Sms */\nexport default class Sms extends Neymo {\n\n    /**\n     * Constructs the Sms API object.\n     *\n     * @param {String} key\n     * @param {String} secret\n     * @param [Object] options\n     */\n    constructor(key, secret, { statusReportReq = 1, ttl = 1000 * 30, messageClass, callback, validity } = {}) {\n        super(key, secret, 'https://rest.nexmo.com/sms/json');\n        this.options = {\n            statusReportReq,\n            ttl,\n            messageClass,\n            callback,\n            validity\n        };\n    }\n\n    /**\n     * Sends text message.\n     *\n     * @param {String} from - The sender number.\n     * @param {String} to - The recipient number.\n     * @param {String} text - The text message.\n     */\n    async sendText(from, to, text, isUnicode = false) {\n        const type = isUnicode ? TYPES.Unicode : TYPES.Text,\n            payload = { from, to, text, type };\n        Object.assign(payload, this.options);\n        return await this.send(payload);\n    }\n\n    /**\n     * Sends unicode text message.\n     *\n     * @param {String} from - The sender number.\n     * @param {String} to - The recipient number.\n     * @param {String} unicodeText - The unicode text message.\n     */\n    async sendUnicode(from, to, unicodeText) {\n        return await this.sendText(from, to, unicodeText, true);\n    }\n\n    /**\n     * Sends binary message.\n     *\n     * @param {String} from - The sender number.\n     * @param {String} to - The recipient number.\n     * @param {String} body - The body message.\n     */\n    async sendBinary(from, to, body, { udh, protocolId } = {}) {\n        const type = TYPES.Binary,\n            payload = { from, to, body, udh, protocolId, type };\n        Object.assign(payload, this.options);\n        return await this.send(payload);\n    }\n\n    /**\n     * Sends binary message.\n     *\n     * @param {String} from - The sender number.\n     * @param {String} to - The recipient number.\n     * @param {String} vcal - The vCal to be sent.\n     */\n    async sendvCal(from, to, vcal) {\n        const type = TYPES.vCal,\n            payload = { from, to, vcal, type };\n        Object.assign(payload, this.options);\n        return await this.send(payload);\n    }\n\n    /**\n     * Sends binary message.\n     *\n     * @param {String} from - The sender number.\n     * @param {String} to - The recipient number.\n     * @param {String} vcard - The vCard to be sent.\n     */\n    async sendvCard(from, to, vcard) {\n        const type = TYPES.vCard,\n            payload = { from, to, vcard, type };\n        Object.assign(payload, this.options);\n        return await this.send(payload);\n    }\n\n    /**\n     * Sends WAP push.\n     *\n     * @param {String} from - The sender number.\n     * @param {String} to - The recipient number.\n     * @param {String} title - The title to be sent.\n     * @param {String} url - The URL to be sent.\n     */\n    async sendWAPPush(from, to, title = 'HOOQ', url = 'https://www.hooq.tv') {\n        const type = TYPES.WAPPush,\n            payload = { from, to, title, url, type };\n        Object.assign(payload, this.options);\n        return await this.send(payload);\n    }\n}\n"],"sourceRoot":"/Users/diorahman/Experiments/hooq/src/luigi/neymo/lib"}